name: CI/CD to EC2 with Docker
on:
  push:
    branches:
      - main
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Create application-secret.properties
        run: |
          echo "${{ secrets.APPLICATION_SECRET_PROPERTIES }}" > src/main/resources/application-secret.properties
      - name: Debug application-secret.properties 생성 여부 확인
        run: |
          echo "📂 디렉토리 확인:"
          ls -al src/main/resources

          echo ""
          echo "application-secret.properties 파일 유무 확인:"
          if [ -f src/main/resources/application-secret.properties ]; then
            echo "✅✅✅"
          else
            echo "❌❌❌"
          fi

          echo ""
          echo "🔍 파일 내용 일부(마스킹):"
          sed 's/./*/g' src/main/resources/application-secret.properties || echo "⚠️파일 없음 또는 읽기 실패 ⚠️"
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'liberica'

      - name: Grant execute permission for Gradle Wrapper
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build
      - name: Run Tests
        run: ./gradlew test
  deploy:
    name: Build Docker JAR and Deploy to EC2
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Create application-secret.properties
        run: |
          echo "${{ secrets.APPLICATION_SECRET_PROPERTIES }}" > src/main/resources/application-secret.properties                 

      - name: Build JAR with Docker
        run: |
          
          # 도커 이미지를 빌드합니다 (myapp.jar 포함)
          docker build -t user-backend-builder .

          # 임시 컨테이너를 생성해서 내부 파일 시스템에 접근할 수 있게 합니다
          docker create --name temp-container user-backend-builder

          # myapp.jar 파일을 호스트로 복사합니다
          docker cp temp-container:/app/myapp.jar ./myapp.jar

          # 사용한 임시 컨테이너를 제거합니다
          docker rm -f temp-container

      - name: Save EC2 SSH key
        run: |
          echo "${{ secrets.EC2_KEY }}" > key.pem
          chmod 400 key.pem

      - name: Deploy JAR to EC2 and Run
        run: |
          scp -i key.pem -o StrictHostKeyChecking=no myapp.jar ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:${{ secrets.EC2_APP_DIR }}/myapp.jar

          ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            pkill -f "${{ secrets.APP_NAME }}" || true  # 기존 프로세스 종료
            nohup java -jar ${{ secrets.EC2_APP_DIR }}/${{ secrets.APP_NAME }} --server.port=8082 > ~/app.log 2>&1 &
          EOF